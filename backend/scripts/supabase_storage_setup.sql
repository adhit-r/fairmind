-- FairMind Supabase Storage Setup SQL Script
-- Run this script in your Supabase SQL Editor

-- 1. Create the AI models storage bucket
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES (
    'ai-models',
    'ai-models',
    false,
    52428800, -- 50MB limit
    ARRAY[
        'application/octet-stream',
        'application/json',
        'text/plain',
        'application/x-python-code',
        'application/x-pickle',
        'application/x-hdf5',
        'application/x-torch'
    ]
) ON CONFLICT (id) DO NOTHING;

-- 2. Enable Row Level Security on storage.objects
ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

-- 3. Drop existing policies if they exist
DROP POLICY IF EXISTS "Organization-based model access" ON storage.objects;
DROP POLICY IF EXISTS "Public Access" ON storage.objects;

-- 4. Create organization-based access policy
CREATE POLICY "Organization-based model access" ON storage.objects
FOR ALL USING (
    bucket_id = 'ai-models' AND
    (storage.foldername(name))[1] = auth.jwt() ->> 'organization_id'
);

-- 5. Create policy for service role access (for backend operations)
CREATE POLICY "Service role access" ON storage.objects
FOR ALL USING (
    bucket_id = 'ai-models' AND
    auth.role() = 'service_role'
);

-- 6. Create policy for authenticated users to read their organization's models
CREATE POLICY "Authenticated users can read their org models" ON storage.objects
FOR SELECT USING (
    bucket_id = 'ai-models' AND
    auth.role() = 'authenticated' AND
    (storage.foldername(name))[1] = auth.jwt() ->> 'organization_id'
);

-- 7. Create policy for authenticated users to upload to their organization
CREATE POLICY "Authenticated users can upload to their org" ON storage.objects
FOR INSERT WITH CHECK (
    bucket_id = 'ai-models' AND
    auth.role() = 'authenticated' AND
    (storage.foldername(name))[1] = auth.jwt() ->> 'organization_id'
);

-- 8. Create policy for authenticated users to update their organization's models
CREATE POLICY "Authenticated users can update their org models" ON storage.objects
FOR UPDATE USING (
    bucket_id = 'ai-models' AND
    auth.role() = 'authenticated' AND
    (storage.foldername(name))[1] = auth.jwt() ->> 'organization_id'
);

-- 9. Create policy for authenticated users to delete their organization's models
CREATE POLICY "Authenticated users can delete their org models" ON storage.objects
FOR DELETE USING (
    bucket_id = 'ai-models' AND
    auth.role() = 'authenticated' AND
    (storage.foldername(name))[1] = auth.jwt() ->> 'organization_id'
);

-- 10. Create a function to get organization storage usage
CREATE OR REPLACE FUNCTION get_organization_storage_usage(org_id text)
RETURNS TABLE (
    total_files bigint,
    total_size bigint,
    file_types jsonb
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        COUNT(*) as total_files,
        COALESCE(SUM(metadata->>'size')::bigint, 0) as total_size,
        jsonb_object_agg(
            COALESCE(metadata->>'mimetype', 'unknown'),
            COUNT(*)
        ) as file_types
    FROM storage.objects
    WHERE bucket_id = 'ai-models'
    AND (storage.foldername(name))[1] = org_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 11. Create a function to list organization models
CREATE OR REPLACE FUNCTION list_organization_models(org_id text, limit_count int DEFAULT 100)
RETURNS TABLE (
    name text,
    size bigint,
    mimetype text,
    created_at timestamptz,
    updated_at timestamptz,
    metadata jsonb
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        so.name::text,
        (so.metadata->>'size')::bigint as size,
        so.metadata->>'mimetype' as mimetype,
        so.created_at,
        so.updated_at,
        so.metadata
    FROM storage.objects so
    WHERE so.bucket_id = 'ai-models'
    AND (storage.foldername(so.name))[1] = org_id
    ORDER BY so.created_at DESC
    LIMIT limit_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 12. Create a function to get model metadata
CREATE OR REPLACE FUNCTION get_model_metadata(org_id text, model_name text)
RETURNS TABLE (
    name text,
    size bigint,
    mimetype text,
    created_at timestamptz,
    updated_at timestamptz,
    metadata jsonb,
    public_url text
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        so.name::text,
        (so.metadata->>'size')::bigint as size,
        so.metadata->>'mimetype' as mimetype,
        so.created_at,
        so.updated_at,
        so.metadata,
        storage.get_public_url('ai-models', so.name) as public_url
    FROM storage.objects so
    WHERE so.bucket_id = 'ai-models'
    AND (storage.foldername(so.name))[1] = org_id
    AND so.name LIKE '%' || model_name || '%';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 13. Create audit log table for model operations
CREATE TABLE IF NOT EXISTS model_audit_logs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    organization_id text NOT NULL,
    model_name text NOT NULL,
    operation text NOT NULL, -- 'upload', 'download', 'delete', 'update'
    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    user_email text,
    ip_address inet,
    user_agent text,
    metadata jsonb,
    created_at timestamptz DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- 14. Enable RLS on audit logs
ALTER TABLE model_audit_logs ENABLE ROW LEVEL SECURITY;

-- 15. Create policy for audit logs
CREATE POLICY "Users can view their org audit logs" ON model_audit_logs
FOR SELECT USING (
    organization_id = auth.jwt() ->> 'organization_id'
);

CREATE POLICY "Service role can insert audit logs" ON model_audit_logs
FOR INSERT WITH CHECK (
    auth.role() = 'service_role'
);

-- 16. Create function to log model operations
CREATE OR REPLACE FUNCTION log_model_operation(
    p_org_id text,
    p_model_name text,
    p_operation text,
    p_user_id uuid DEFAULT NULL,
    p_user_email text DEFAULT NULL,
    p_ip_address inet DEFAULT NULL,
    p_user_agent text DEFAULT NULL,
    p_metadata jsonb DEFAULT '{}'::jsonb
)
RETURNS void AS $$
BEGIN
    INSERT INTO model_audit_logs (
        organization_id,
        model_name,
        operation,
        user_id,
        user_email,
        ip_address,
        user_agent,
        metadata
    ) VALUES (
        p_org_id,
        p_model_name,
        p_operation,
        p_user_id,
        p_user_email,
        p_ip_address,
        p_user_agent,
        p_metadata
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 17. Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_storage_objects_bucket_org ON storage.objects (bucket_id, (storage.foldername(name))[1]);
CREATE INDEX IF NOT EXISTS idx_storage_objects_created_at ON storage.objects (created_at);
CREATE INDEX IF NOT EXISTS idx_model_audit_logs_org_created ON model_audit_logs (organization_id, created_at);

-- 18. Create a view for model statistics
CREATE OR REPLACE VIEW model_statistics AS
SELECT 
    (storage.foldername(name))[1] as organization_id,
    COUNT(*) as total_models,
    COALESCE(SUM((metadata->>'size')::bigint), 0) as total_size_bytes,
    COUNT(DISTINCT metadata->>'mimetype') as unique_file_types,
    MIN(created_at) as first_model_upload,
    MAX(created_at) as last_model_upload,
    jsonb_object_agg(
        COALESCE(metadata->>'mimetype', 'unknown'),
        COUNT(*)
    ) as file_type_distribution
FROM storage.objects
WHERE bucket_id = 'ai-models'
GROUP BY (storage.foldername(name))[1];

-- 19. Grant necessary permissions
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT SELECT ON storage.objects TO authenticated;
GRANT INSERT ON storage.objects TO authenticated;
GRANT UPDATE ON storage.objects TO authenticated;
GRANT DELETE ON storage.objects TO authenticated;

-- 20. Create a function to clean up orphaned files
CREATE OR REPLACE FUNCTION cleanup_orphaned_models()
RETURNS TABLE (
    deleted_files bigint,
    freed_space bigint
) AS $$
DECLARE
    orphaned_count bigint := 0;
    freed_space bigint := 0;
BEGIN
    -- This is a placeholder for cleanup logic
    -- You can implement specific cleanup rules here
    
    RETURN QUERY SELECT orphaned_count, freed_space;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Print success message
DO $$
BEGIN
    RAISE NOTICE 'âœ… FairMind Supabase Storage Setup Completed Successfully!';
    RAISE NOTICE 'Storage bucket: ai-models';
    RAISE NOTICE 'RLS policies: Enabled';
    RAISE NOTICE 'Audit logging: Enabled';
    RAISE NOTICE 'Organization isolation: Enabled';
END $$;
