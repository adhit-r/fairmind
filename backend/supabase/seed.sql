-- Fairmind Database Seed Data
-- This file contains all necessary tables and sample data for the Fairmind platform

-- Enable necessary extensions
create extension if not exists "uuid-ossp" with schema extensions;
create extension if not exists "pgcrypto" with schema extensions;
create extension if not exists "vector" with schema extensions;

-- Create custom types if they don't exist
do $$
begin
  if not exists (select 1 from pg_type where typname = 'user_role') then
    create type user_role as enum (
      'user',
      'admin',
      'auditor',
      'developer',
      'analyst',
      'manager',
      'guest'
    );
  end if;
end $$;

-- Create audit_logs table
create table if not exists public.audit_logs (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete set null,
  action text not null,
  resource_type text,
  resource_id text,
  details jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security
alter table public.audit_logs enable row level security;

-- Create indexes for better performance
create index if not exists idx_audit_logs_user_id on public.audit_logs (user_id);
create index if not exists idx_audit_logs_created_at on public.audit_logs (created_at);
create index if not exists idx_audit_logs_resource on public.audit_logs (resource_type, resource_id);

-- Create profiles table to extend auth.users
create table if not exists public.profiles (
  id uuid references auth.users on delete cascade primary key,
  username text unique,
  full_name text,
  avatar_url text,
  role user_role not null default 'user'::user_role,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table public.profiles enable row level security;

-- Create a function to handle new user signups
create or replace function public.handle_new_user() 
returns trigger as $$
begin
  insert into public.profiles (id, username, role)
  values (
    new.id, 
    coalesce(new.raw_user_meta_data->>'username', 'user') || '_' || substr(md5(random()::text), 1, 8),
    'user'::user_role
  );
  return new;
end;
$$ language plpgsql security definer;

-- Trigger the function every time a user is created
create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Create RLS policies for profiles
create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can update own profile."
  on profiles for update
  using ( auth.uid() = id );

-- Create RLS policies for audit_logs
create policy "Enable read access for authenticated users"
  on audit_logs for select
  to authenticated
  using (true);

create policy "Enable insert for authenticated users"
  on audit_logs for insert
  to authenticated
  with check (true);

-- Helper function to list tables
create or replace function public.get_tables()
returns table (table_name text) as $$
begin
  return query
  select t.table_name::text
  from information_schema.tables t
  where t.table_schema = 'public'
  and t.table_type = 'BASE TABLE'
  order by t.table_name;
end;
$$ language plpgsql security definer;

-- Helper function to get user role
create or replace function public.get_user_role()
returns user_role as $$
begin
  return (
    select role 
    from public.profiles 
    where id = auth.uid()
  );
end;
$$ language plpgsql security definer;

-- Create a default admin user (password: CHANGE_THIS_PASSWORD - change this after first login)
-- First check if user exists
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE email = 'admin@fairmind.app') THEN
    INSERT INTO auth.users (
      id, instance_id, email, encrypted_password, email_confirmed_at,
      raw_app_meta_data, raw_user_meta_data, created_at, updated_at, last_sign_in_at
    ) VALUES (
      '00000000-0000-0000-0000-000000000000',
      '00000000-0000-0000-0000-000000000000',
      'admin@fairmind.app',
      crypt('CHANGE_THIS_PASSWORD', gen_salt('bf')),
      now(),
      '{"provider":"email","providers":["email"]}',
      '{"username":"admin"}',
      now(),
      now(),
      now()
    );
    
    -- Insert into profiles
    INSERT INTO public.profiles (id, username, role)
    VALUES (
      '00000000-0000-0000-0000-000000000000',
      'admin_' || substr(md5(random()::text), 1, 8),
      'admin'::user_role
    )
    ON CONFLICT (id) DO UPDATE 
    SET role = 'admin'::user_role;
  END IF;
END $$;

-- Set admin role for the default admin user
update public.profiles 
set role = 'admin'::user_role 
where id = '00000000-0000-0000-0000-000000000000';

-- Enable realtime for tables
alter publication supabase_realtime add table public.audit_logs;
alter publication supabase_realtime add table public.profiles;

-- ============================================================================
-- ML MODEL VECTOR STORAGE WITH PGVECTOR
-- ============================================================================

-- ML Model embeddings table
CREATE TABLE IF NOT EXISTS ml_model_embeddings (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    model_id VARCHAR(255) NOT NULL,
    model_name VARCHAR(255) NOT NULL,
    embedding vector(1536), -- OpenAI embedding dimension
    model_metadata JSONB NOT NULL,
    bias_characteristics JSONB,
    performance_metrics JSONB,
    ethical_framework JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID REFERENCES auth.users(id)
);

-- Create vector index for similarity search
CREATE INDEX IF NOT EXISTS idx_ml_model_embeddings_vector 
ON ml_model_embeddings 
USING ivfflat (embedding vector_cosine_ops)
WITH (lists = 100);

-- Create index for model_id lookups
CREATE INDEX IF NOT EXISTS idx_ml_model_embeddings_model_id 
ON ml_model_embeddings(model_id);

-- Model DNA signatures table with vector support
CREATE TABLE IF NOT EXISTS model_dna_signatures (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    model_id VARCHAR(255) NOT NULL,
    dna_signature VARCHAR(64) NOT NULL,
    dna_embedding vector(1536), -- Vector representation of DNA signature
    parent_models TEXT[],
    child_models TEXT[],
    inheritance_type VARCHAR(50),
    algorithm_family VARCHAR(100),
    bias_inheritance JSONB,
    performance_characteristics JSONB,
    ethical_framework JSONB,
    risk_profile JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID REFERENCES auth.users(id)
);

-- Create vector index for DNA similarity search
CREATE INDEX IF NOT EXISTS idx_model_dna_signatures_vector 
ON model_dna_signatures 
USING ivfflat (dna_embedding vector_cosine_ops)
WITH (lists = 50);

-- Create index for DNA signature lookups
CREATE INDEX IF NOT EXISTS idx_model_dna_signatures_signature 
ON model_dna_signatures(dna_signature);

-- Model lineage vectors table
CREATE TABLE IF NOT EXISTS model_lineage_vectors (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    model_id VARCHAR(255) NOT NULL,
    lineage_embedding vector(1536),
    lineage_path TEXT[],
    generation_depth INTEGER,
    parent_models TEXT[],
    child_models TEXT[],
    inheritance_pattern JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID REFERENCES auth.users(id)
);

CREATE INDEX IF NOT EXISTS idx_model_lineage_vectors_vector 
ON model_lineage_vectors 
USING ivfflat (lineage_embedding vector_cosine_ops)
WITH (lists = 50);

-- Model modifications tracking
CREATE TABLE IF NOT EXISTS model_modifications (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    model_id VARCHAR(255) NOT NULL,
    modification_type VARCHAR(100),
    modification_embedding vector(1536),
    before_state JSONB,
    after_state JSONB,
    impact_assessment JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID REFERENCES auth.users(id)
);

CREATE INDEX IF NOT EXISTS idx_model_modifications_vector 
ON model_modifications 
USING ivfflat (modification_embedding vector_cosine_ops)
WITH (lists = 50);

-- Historical scenario embeddings
CREATE TABLE IF NOT EXISTS historical_scenario_embeddings (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    scenario_name VARCHAR(255) NOT NULL,
    scenario_embedding vector(1536),
    scenario_data JSONB,
    historical_context JSONB,
    bias_analysis JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID REFERENCES auth.users(id)
);

CREATE INDEX IF NOT EXISTS idx_historical_scenario_embeddings_vector 
ON historical_scenario_embeddings 
USING ivfflat (scenario_embedding vector_cosine_ops)
WITH (lists = 50);

-- ============================================================================
-- VECTOR SIMILARITY SEARCH FUNCTIONS
-- ============================================================================

-- Function to find similar models
CREATE OR REPLACE FUNCTION find_similar_models(
    query_embedding vector(1536),
    match_threshold float DEFAULT 0.8,
    match_count int DEFAULT 10
)
RETURNS TABLE (
    id UUID,
    model_id VARCHAR(255),
    model_name VARCHAR(255),
    similarity float
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        me.id,
        me.model_id,
        me.model_name,
        1 - (me.embedding <=> query_embedding) as similarity
    FROM ml_model_embeddings me
    WHERE 1 - (me.embedding <=> query_embedding) > match_threshold
    ORDER BY me.embedding <=> query_embedding
    LIMIT match_count;
END;
$$;

-- Function to find similar DNA signatures
CREATE OR REPLACE FUNCTION find_similar_dna_signatures(
    query_embedding vector(1536),
    match_threshold float DEFAULT 0.8,
    match_count int DEFAULT 10
)
RETURNS TABLE (
    id UUID,
    model_id VARCHAR(255),
    dna_signature VARCHAR(64),
    similarity float
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        mds.id,
        mds.model_id,
        mds.dna_signature,
        1 - (mds.dna_embedding <=> query_embedding) as similarity
    FROM model_dna_signatures mds
    WHERE 1 - (mds.dna_embedding <=> query_embedding) > match_threshold
    ORDER BY mds.dna_embedding <=> query_embedding
    LIMIT match_count;
END;
$$;

-- Function to find similar lineages
CREATE OR REPLACE FUNCTION find_similar_lineages(
    query_embedding vector(1536),
    match_threshold float DEFAULT 0.8,
    match_count int DEFAULT 10
)
RETURNS TABLE (
    id UUID,
    model_id VARCHAR(255),
    lineage_path TEXT[],
    similarity float
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        mlv.id,
        mlv.model_id,
        mlv.lineage_path,
        1 - (mlv.lineage_embedding <=> query_embedding) as similarity
    FROM model_lineage_vectors mlv
    WHERE 1 - (mlv.lineage_embedding <=> query_embedding) > match_threshold
    ORDER BY mlv.lineage_embedding <=> query_embedding
    LIMIT match_count;
END;
$$;

-- Function to find similar historical scenarios
CREATE OR REPLACE FUNCTION find_similar_historical_scenarios(
    query_embedding vector(1536),
    match_threshold float DEFAULT 0.8,
    match_count int DEFAULT 10
)
RETURNS TABLE (
    id UUID,
    scenario_name VARCHAR(255),
    similarity float
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        hse.id,
        hse.scenario_name,
        1 - (hse.scenario_embedding <=> query_embedding) as similarity
    FROM historical_scenario_embeddings hse
    WHERE 1 - (hse.scenario_embedding <=> query_embedding) > match_threshold
    ORDER BY hse.scenario_embedding <=> query_embedding
    LIMIT match_count;
END;
$$;

-- ============================================================================
-- GEOGRAPHIC BIAS ANALYSIS TABLES
-- ============================================================================

-- Geographic bias analyses table
CREATE TABLE IF NOT EXISTS geographic_bias_analyses (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    model_id VARCHAR(255) NOT NULL,
    source_country VARCHAR(3) NOT NULL,
    target_country VARCHAR(3) NOT NULL,
    bias_score FLOAT,
    risk_level VARCHAR(20) CHECK (risk_level IN ('low', 'medium', 'high', 'critical')),
    cultural_factors JSONB,
    compliance_status VARCHAR(20) DEFAULT 'pending',
    analysis_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_by UUID REFERENCES auth.users(id)
);

CREATE INDEX IF NOT EXISTS idx_geographic_bias_model_id ON geographic_bias_analyses(model_id);
CREATE INDEX IF NOT EXISTS idx_geographic_bias_countries ON geographic_bias_analyses(source_country, target_country);
CREATE INDEX IF NOT EXISTS idx_geographic_bias_risk_level ON geographic_bias_analyses(risk_level);
CREATE INDEX IF NOT EXISTS idx_geographic_bias_created_at ON geographic_bias_analyses(created_at);

-- Country performance metrics
CREATE TABLE IF NOT EXISTS country_performance_metrics (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    country_code VARCHAR(3) NOT NULL,
    country_name VARCHAR(100) NOT NULL,
    compliance_status VARCHAR(20) DEFAULT 'pending',
    risk_score FLOAT DEFAULT 0.0,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    metrics_data JSONB
);

CREATE INDEX IF NOT EXISTS idx_country_performance_code ON country_performance_metrics(country_code);
CREATE INDEX IF NOT EXISTS idx_country_performance_status ON country_performance_metrics(compliance_status);

-- Cultural factors table
CREATE TABLE IF NOT EXISTS cultural_factors (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    country_code VARCHAR(3) NOT NULL,
    factor_name VARCHAR(100) NOT NULL,
    factor_value JSONB,
    impact_score FLOAT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Geographic bias alerts
CREATE TABLE IF NOT EXISTS geographic_bias_alerts (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    analysis_id UUID REFERENCES geographic_bias_analyses(id) ON DELETE CASCADE,
    alert_type VARCHAR(50) NOT NULL,
    severity VARCHAR(20) CHECK (severity IN ('low', 'medium', 'high', 'critical')),
    message TEXT NOT NULL,
    is_resolved BOOLEAN DEFAULT FALSE,
    resolved_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_geographic_bias_alerts_type ON geographic_bias_alerts(alert_type);
CREATE INDEX IF NOT EXISTS idx_geographic_bias_alerts_severity ON geographic_bias_alerts(severity);
CREATE INDEX IF NOT EXISTS idx_geographic_bias_alerts_resolved ON geographic_bias_alerts(is_resolved);

-- ============================================================================
-- TRIGGERS AND FUNCTIONS FOR GEOGRAPHIC BIAS
-- ============================================================================

-- Function to update country performance metrics
CREATE OR REPLACE FUNCTION update_country_performance_metrics()
RETURNS TRIGGER AS $$
BEGIN
    -- Update or insert country performance metrics
    INSERT INTO country_performance_metrics (country_code, country_name, compliance_status, risk_score, last_updated, metrics_data)
    VALUES (
        NEW.target_country,
        (SELECT country_name FROM country_performance_metrics WHERE country_code = NEW.target_country LIMIT 1),
        CASE 
            WHEN NEW.risk_level IN ('high', 'critical') THEN 'high_risk'
            WHEN NEW.risk_level = 'medium' THEN 'moderate_risk'
            ELSE 'low_risk'
        END,
        COALESCE(NEW.bias_score, 0.0),
        NOW(),
        jsonb_build_object(
            'total_analyses', (SELECT COUNT(*) FROM geographic_bias_analyses WHERE target_country = NEW.target_country),
            'average_bias_score', (SELECT AVG(bias_score) FROM geographic_bias_analyses WHERE target_country = NEW.target_country),
            'risk_distribution', (
                SELECT jsonb_build_object(
                    'low', COUNT(*) FILTER (WHERE risk_level = 'low'),
                    'medium', COUNT(*) FILTER (WHERE risk_level = 'medium'),
                    'high', COUNT(*) FILTER (WHERE risk_level = 'high'),
                    'critical', COUNT(*) FILTER (WHERE risk_level = 'critical')
                )
                FROM geographic_bias_analyses 
                WHERE target_country = NEW.target_country
            )
        )
    )
    ON CONFLICT (country_code) 
    DO UPDATE SET
        compliance_status = EXCLUDED.compliance_status,
        risk_score = EXCLUDED.risk_score,
        last_updated = EXCLUDED.last_updated,
        metrics_data = EXCLUDED.metrics_data;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update country performance metrics
CREATE TRIGGER trigger_update_country_performance
    AFTER INSERT ON geographic_bias_analyses
    FOR EACH ROW
    EXECUTE FUNCTION update_country_performance_metrics();

-- Function to generate geographic bias alerts
CREATE OR REPLACE FUNCTION generate_geographic_bias_alerts()
RETURNS TRIGGER AS $$
BEGIN
    -- Generate alerts based on bias score and risk level
    IF NEW.bias_score > 0.7 OR NEW.risk_level IN ('high', 'critical') THEN
        INSERT INTO geographic_bias_alerts (analysis_id, alert_type, severity, message)
        VALUES (
            NEW.id,
            'high_bias_detected',
            NEW.risk_level,
            format('High bias detected for model %s: %s to %s (score: %.2f)', 
                   NEW.model_id, NEW.source_country, NEW.target_country, NEW.bias_score)
        );
    END IF;
    
    -- Generate compliance alerts
    IF NEW.compliance_status = 'non_compliant' THEN
        INSERT INTO geographic_bias_alerts (analysis_id, alert_type, severity, message)
        VALUES (
            NEW.id,
            'compliance_violation',
            'high',
            format('Compliance violation detected for model %s in %s', 
                   NEW.model_id, NEW.target_country)
        );
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to generate geographic bias alerts
CREATE TRIGGER trigger_generate_geographic_bias_alerts
    AFTER INSERT ON geographic_bias_analyses
    FOR EACH ROW
    EXECUTE FUNCTION generate_geographic_bias_alerts();

-- ============================================================================
-- SAMPLE DATA INSERTION
-- ============================================================================

-- Insert sample country performance metrics
INSERT INTO country_performance_metrics (country_code, country_name, compliance_status, risk_score, metrics_data) VALUES
('USA', 'United States', 'low_risk', 0.2, '{"total_analyses": 15, "average_bias_score": 0.15}'),
('GBR', 'United Kingdom', 'low_risk', 0.25, '{"total_analyses": 12, "average_bias_score": 0.18}'),
('DEU', 'Germany', 'moderate_risk', 0.45, '{"total_analyses": 8, "average_bias_score": 0.42}'),
('FRA', 'France', 'moderate_risk', 0.38, '{"total_analyses": 6, "average_bias_score": 0.35}'),
('JPN', 'Japan', 'high_risk', 0.72, '{"total_analyses": 10, "average_bias_score": 0.68}'),
('IND', 'India', 'high_risk', 0.65, '{"total_analyses": 18, "average_bias_score": 0.62}'),
('CHN', 'China', 'high_risk', 0.78, '{"total_analyses": 14, "average_bias_score": 0.75}'),
('BRA', 'Brazil', 'moderate_risk', 0.52, '{"total_analyses": 9, "average_bias_score": 0.48}')
ON CONFLICT (country_code) DO UPDATE SET
    compliance_status = EXCLUDED.compliance_status,
    risk_score = EXCLUDED.risk_score,
    metrics_data = EXCLUDED.metrics_data;

-- Insert sample cultural factors
INSERT INTO cultural_factors (country_code, factor_name, factor_value, impact_score) VALUES
('USA', 'individualism', '{"score": 0.91, "description": "High individualistic culture"}', 0.8),
('USA', 'power_distance', '{"score": 0.40, "description": "Low power distance"}', 0.6),
('JPN', 'collectivism', '{"score": 0.46, "description": "Collectivistic culture"}', 0.9),
('JPN', 'uncertainty_avoidance', '{"score": 0.92, "description": "High uncertainty avoidance"}', 0.85),
('IND', 'power_distance', '{"score": 0.77, "description": "High power distance"}', 0.75),
('IND', 'masculinity', '{"score": 0.56, "description": "Moderate masculinity"}', 0.65),
('DEU', 'uncertainty_avoidance', '{"score": 0.65, "description": "Moderate uncertainty avoidance"}', 0.7),
('DEU', 'masculinity', '{"score": 0.66, "description": "Moderate masculinity"}', 0.6)
ON CONFLICT DO NOTHING;

-- Insert sample geographic bias analyses
INSERT INTO geographic_bias_analyses (model_id, source_country, target_country, bias_score, risk_level, cultural_factors, compliance_status) VALUES
('model_001', 'USA', 'JPN', 0.75, 'high', '{"cultural_distance": 0.8, "language_barrier": 0.9}', 'non_compliant'),
('model_002', 'USA', 'IND', 0.68, 'high', '{"cultural_distance": 0.7, "economic_difference": 0.6}', 'non_compliant'),
('model_003', 'GBR', 'DEU', 0.35, 'medium', '{"cultural_distance": 0.3, "language_similarity": 0.4}', 'compliant'),
('model_004', 'USA', 'USA', 0.15, 'low', '{"cultural_distance": 0.0, "same_region": true}', 'compliant'),
('model_005', 'CHN', 'USA', 0.82, 'critical', '{"cultural_distance": 0.9, "political_difference": 0.8}', 'non_compliant'),
('model_006', 'FRA', 'BRA', 0.45, 'medium', '{"cultural_distance": 0.5, "language_difference": 0.6}', 'pending')
ON CONFLICT DO NOTHING;

-- Insert sample ML model embeddings (with dummy embeddings)
INSERT INTO ml_model_embeddings (model_id, model_name, model_metadata, bias_characteristics, performance_metrics, ethical_framework) VALUES
('model_001', 'GPT-4-Fairness', '{"version": "1.0", "architecture": "transformer", "parameters": "175B"}', '{"demographic_parity": 0.85, "equal_opportunity": 0.78}', '{"accuracy": 0.92, "f1_score": 0.89}', '{"framework": "NIST", "compliance_level": "high"}'),
('model_002', 'BERT-Ethical', '{"version": "2.1", "architecture": "transformer", "parameters": "340M"}', '{"demographic_parity": 0.72, "equal_opportunity": 0.68}', '{"accuracy": 0.88, "f1_score": 0.85}', '{"framework": "EU_AI_Act", "compliance_level": "medium"}'),
('model_003', 'FairBERT', '{"version": "1.5", "architecture": "transformer", "parameters": "110M"}', '{"demographic_parity": 0.91, "equal_opportunity": 0.89}', '{"accuracy": 0.90, "f1_score": 0.87}', '{"framework": "NIST", "compliance_level": "high"}'),
('model_004', 'EthicalGPT', '{"version": "3.0", "architecture": "transformer", "parameters": "6B"}', '{"demographic_parity": 0.78, "equal_opportunity": 0.75}', '{"accuracy": 0.86, "f1_score": 0.83}', '{"framework": "Custom", "compliance_level": "medium"}'),
('model_005', 'BiasDetector', '{"version": "1.2", "architecture": "cnn", "parameters": "50M"}', '{"demographic_parity": 0.95, "equal_opportunity": 0.93}', '{"accuracy": 0.94, "f1_score": 0.91}', '{"framework": "NIST", "compliance_level": "high"}')
ON CONFLICT DO NOTHING;

-- Insert sample model DNA signatures
INSERT INTO model_dna_signatures (model_id, dna_signature, inheritance_type, algorithm_family, bias_inheritance, performance_characteristics, ethical_framework, risk_profile) VALUES
('model_001', 'a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6', 'inherited', 'transformer', '{"parent_bias": 0.15, "inheritance_strength": 0.8}', '{"inherited_performance": 0.92}', '{"inherited_framework": "NIST"}', '{"risk_level": "low", "mitigation_required": false}'),
('model_002', 'b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7', 'modified', 'transformer', '{"parent_bias": 0.25, "inheritance_strength": 0.6}', '{"inherited_performance": 0.88}', '{"inherited_framework": "EU_AI_Act"}', '{"risk_level": "medium", "mitigation_required": true}'),
('model_003', 'c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8', 'inherited', 'transformer', '{"parent_bias": 0.08, "inheritance_strength": 0.9}', '{"inherited_performance": 0.90}', '{"inherited_framework": "NIST"}', '{"risk_level": "low", "mitigation_required": false}'),
('model_004', 'd4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9', 'modified', 'transformer', '{"parent_bias": 0.20, "inheritance_strength": 0.7}', '{"inherited_performance": 0.86}', '{"inherited_framework": "Custom"}', '{"risk_level": "medium", "mitigation_required": true}'),
('model_005', 'e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0', 'new', 'cnn', '{"parent_bias": 0.05, "inheritance_strength": 0.95}', '{"inherited_performance": 0.94}', '{"inherited_framework": "NIST"}', '{"risk_level": "low", "mitigation_required": false}')
ON CONFLICT DO NOTHING;

-- Insert sample audit logs
INSERT INTO audit_logs (user_id, action, resource_type, resource_id, details, ip_address) VALUES
('00000000-0000-0000-0000-000000000000', 'model_upload', 'ml_model', 'model_001', '{"model_name": "GPT-4-Fairness", "file_size": "2.1GB"}', '192.168.1.100'),
('00000000-0000-0000-0000-000000000000', 'bias_analysis', 'geographic_bias', 'analysis_001', '{"source_country": "USA", "target_country": "JPN", "bias_score": 0.75}', '192.168.1.100'),
('00000000-0000-0000-0000-000000000000', 'compliance_check', 'model', 'model_002', '{"compliance_status": "non_compliant", "violations": ["geographic_bias"]}', '192.168.1.100'),
('00000000-0000-0000-0000-000000000000', 'dna_analysis', 'model_dna', 'model_003', '{"dna_signature": "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8", "inheritance_type": "inherited"}', '192.168.1.100'),
('00000000-0000-0000-0000-000000000000', 'alert_generated', 'geographic_bias', 'alert_001', '{"alert_type": "high_bias_detected", "severity": "high"}', '192.168.1.100')
ON CONFLICT DO NOTHING;
