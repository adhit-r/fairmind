-- Enable necessary extensions
create extension if not exists "uuid-ossp" with schema extensions;
create extension if not exists "pgcrypto" with schema extensions;

-- Create custom types if they don't exist
do $$
begin
  if not exists (select 1 from pg_type where typname = 'user_role') then
    create type user_role as enum (
      'user',
      'admin',
      'auditor',
      'developer',
      'analyst',
      'manager',
      'guest'
    );
  end if;
end $$;

-- Create audit_logs table
create table if not exists public.audit_logs (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete set null,
  action text not null,
  resource_type text,
  resource_id text,
  details jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security
alter table public.audit_logs enable row level security;

-- Create indexes for better performance
create index if not exists idx_audit_logs_user_id on public.audit_logs (user_id);
create index if not exists idx_audit_logs_created_at on public.audit_logs (created_at);
create index if not exists idx_audit_logs_resource on public.audit_logs (resource_type, resource_id);

-- Create profiles table to extend auth.users
create table if not exists public.profiles (
  id uuid references auth.users on delete cascade primary key,
  username text unique,
  full_name text,
  avatar_url text,
  role user_role not null default 'user'::user_role,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table public.profiles enable row level security;

-- Create a function to handle new user signups
create or replace function public.handle_new_user() 
returns trigger as $$
begin
  insert into public.profiles (id, username, role)
  values (
    new.id, 
    new.raw_user_meta_data->>'username' || '_' || substr(md5(random()::text), 1, 8),
    'user'::user_role
  );
  return new;
end;
$$ language plpgsql security definer;

-- Trigger the function every time a user is created
create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Helper function to list tables
create or replace function public.get_tables()
returns table (table_name text) as $$
begin
  return query 
    select tablename::text 
    from pg_tables 
    where schemaname = 'public';
end;
$$ language plpgsql security definer;
