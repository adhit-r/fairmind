-- Fairmind Database Setup
-- Run this SQL in your Supabase SQL editor

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;
CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA extensions;
CREATE EXTENSION IF NOT EXISTS "vector" WITH SCHEMA extensions;

-- Create custom types if they don't exist
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
    CREATE TYPE user_role AS ENUM (
      'user',
      'admin',
      'auditor',
      'developer',
      'analyst',
      'manager',
      'guest'
    );
  END IF;
END $$;

-- Drop existing functions that might conflict
DROP FUNCTION IF EXISTS public.get_user_role() CASCADE;
DROP FUNCTION IF EXISTS public.handle_new_user() CASCADE;
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- Create profiles table to extend auth.users
CREATE TABLE IF NOT EXISTS public.profiles (
  id uuid REFERENCES auth.users ON DELETE CASCADE PRIMARY KEY,
  username text UNIQUE,
  full_name text,
  avatar_url text,
  role user_role NOT NULL DEFAULT 'user'::user_role,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create audit_logs table
CREATE TABLE IF NOT EXISTS public.audit_logs (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users ON DELETE SET NULL,
  action text NOT NULL,
  resource_type text,
  resource_id text,
  details jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable Row Level Security
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.audit_logs ENABLE ROW LEVEL SECURITY;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_audit_logs_user_id ON public.audit_logs (user_id);
CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON public.audit_logs (created_at);
CREATE INDEX IF NOT EXISTS idx_audit_logs_resource ON public.audit_logs (resource_type, resource_id);

-- Create a function to handle new user signups
CREATE OR REPLACE FUNCTION public.handle_new_user() 
RETURNS trigger AS $$
BEGIN
  INSERT INTO public.profiles (id, username, role)
  VALUES (
    new.id, 
    COALESCE(new.raw_user_meta_data->>'username', 'user') || '_' || substr(md5(random()::text), 1, 8),
    'user'::user_role
  );
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create helper function to get user role
CREATE OR REPLACE FUNCTION public.get_user_role()
RETURNS user_role AS $$
BEGIN
  RETURN (
    SELECT role 
    FROM public.profiles 
    WHERE id = auth.uid()
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger the function every time a user is created
CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Create RLS policies for profiles
DROP POLICY IF EXISTS "Public profiles are viewable by everyone." ON profiles;
CREATE POLICY "Public profiles are viewable by everyone."
  ON profiles FOR SELECT
  USING ( true );

DROP POLICY IF EXISTS "Users can update own profile." ON profiles;
CREATE POLICY "Users can update own profile."
  ON profiles FOR UPDATE
  USING ( auth.uid() = id );

-- Create RLS policies for audit_logs
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON audit_logs;
CREATE POLICY "Enable read access for authenticated users"
  ON audit_logs FOR SELECT
  TO authenticated
  USING (true);

DROP POLICY IF EXISTS "Enable insert for authenticated users" ON audit_logs;
CREATE POLICY "Enable insert for authenticated users"
  ON audit_logs FOR INSERT
  TO authenticated
  WITH CHECK (true);

-- Create organizations table
CREATE TABLE IF NOT EXISTS public.organizations (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  domain text UNIQUE,
  created_by uuid NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now()
);

-- Add unique constraint for lowercase names
ALTER TABLE public.organizations ADD CONSTRAINT organizations_name_lower_unique UNIQUE (lower(name));

-- Create organization members table
CREATE TABLE IF NOT EXISTS public.organization_members (
  org_id uuid NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
  user_id uuid NOT NULL,
  role text NOT NULL CHECK (role IN ('owner','admin','member','viewer')),
  status text NOT NULL DEFAULT 'active' CHECK (status IN ('active','invited','disabled')),
  joined_at timestamp with time zone NOT NULL DEFAULT now(),
  PRIMARY KEY (org_id, user_id)
);

-- Create AI models table
CREATE TABLE IF NOT EXISTS public.ai_models (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  version text NOT NULL,
  model_type text NOT NULL,
  framework text,
  description text,
  file_path text,
  file_size bigint,
  sha256_hash text,
  metadata jsonb,
  organization_id uuid REFERENCES public.organizations(id) ON DELETE CASCADE,
  created_by uuid REFERENCES auth.users(id) ON DELETE SET NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create bias analysis results table
CREATE TABLE IF NOT EXISTS public.bias_analyses (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  model_id uuid REFERENCES public.ai_models(id) ON DELETE CASCADE,
  dataset_name text,
  analysis_type text NOT NULL,
  results jsonb NOT NULL,
  status text NOT NULL DEFAULT 'completed',
  created_by uuid REFERENCES auth.users(id) ON DELETE SET NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Enable RLS on new tables
ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organization_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ai_models ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.bias_analyses ENABLE ROW LEVEL SECURITY;

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_ai_models_org_id ON public.ai_models (organization_id);
CREATE INDEX IF NOT EXISTS idx_ai_models_created_by ON public.ai_models (created_by);
CREATE INDEX IF NOT EXISTS idx_bias_analyses_model_id ON public.bias_analyses (model_id);
CREATE INDEX IF NOT EXISTS idx_bias_analyses_created_by ON public.bias_analyses (created_by);

-- Create RLS policies for organizations
CREATE POLICY IF NOT EXISTS "Users can view organizations they belong to"
  ON public.organizations FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM public.organization_members
      WHERE org_id = organizations.id AND user_id = auth.uid()
    )
  );

-- Create RLS policies for organization members
CREATE POLICY IF NOT EXISTS "Users can view members of their organizations"
  ON public.organization_members FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM public.organization_members om
      WHERE om.org_id = organization_members.org_id AND om.user_id = auth.uid()
    )
  );

-- Create RLS policies for AI models
CREATE POLICY IF NOT EXISTS "Users can view models in their organizations"
  ON public.ai_models FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM public.organization_members
      WHERE org_id = ai_models.organization_id AND user_id = auth.uid()
    )
  );

CREATE POLICY IF NOT EXISTS "Users can create models in their organizations"
  ON public.ai_models FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.organization_members
      WHERE org_id = ai_models.organization_id AND user_id = auth.uid()
      AND role IN ('owner', 'admin', 'member')
    )
  );

-- Create RLS policies for bias analyses
CREATE POLICY IF NOT EXISTS "Users can view bias analyses for models in their organizations"
  ON public.bias_analyses FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM public.ai_models am
      JOIN public.organization_members om ON am.organization_id = om.org_id
      WHERE am.id = bias_analyses.model_id AND om.user_id = auth.uid()
    )
  );

-- Create a default demo organization
INSERT INTO public.organizations (id, name, domain, created_by)
VALUES (
  '00000000-0000-0000-0000-000000000001',
  'Demo Organization',
  'demo.fairmind.xyz',
  '00000000-0000-0000-0000-000000000000'
) ON CONFLICT (id) DO NOTHING;

-- Create a default admin user (password: admin123)
INSERT INTO auth.users (
  id, instance_id, email, encrypted_password, email_confirmed_at,
  raw_app_meta_data, raw_user_meta_data, created_at, updated_at, last_sign_in_at
) VALUES (
  '00000000-0000-0000-0000-000000000000',
  '00000000-0000-0000-0000-000000000000',
  'admin@fairmind.app',
  crypt('admin123', gen_salt('bf')),
  now(),
  '{"provider":"email","providers":["email"]}',
  '{"username":"admin"}',
  now(),
  now(),
  now()
) ON CONFLICT (id) DO NOTHING;

-- Insert admin profile
INSERT INTO public.profiles (id, username, role)
VALUES (
  '00000000-0000-0000-0000-000000000000',
  'admin_' || substr(md5(random()::text), 1, 8),
  'admin'::user_role
) ON CONFLICT (id) DO UPDATE 
SET role = 'admin'::user_role;

-- Add admin to demo organization
INSERT INTO public.organization_members (org_id, user_id, role)
VALUES (
  '00000000-0000-0000-0000-000000000001',
  '00000000-0000-0000-0000-000000000000',
  'owner'
) ON CONFLICT (org_id, user_id) DO NOTHING;

-- Enable realtime for tables
ALTER PUBLICATION supabase_realtime ADD TABLE public.audit_logs;
ALTER PUBLICATION supabase_realtime ADD TABLE public.profiles;
ALTER PUBLICATION supabase_realtime ADD TABLE public.organizations;
ALTER PUBLICATION supabase_realtime ADD TABLE public.organization_members;
ALTER PUBLICATION supabase_realtime ADD TABLE public.ai_models;
ALTER PUBLICATION supabase_realtime ADD TABLE public.bias_analyses;

-- Success message
SELECT 'Database setup completed successfully!' as status;
