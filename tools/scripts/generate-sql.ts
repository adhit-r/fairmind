import * as fs from 'fs';
import * as path from 'path';

// This script will generate a SQL file that you can run in the Supabase SQL editor

const sqlContent = `-- Fairmind Database Setup
-- Run this SQL in your Supabase SQL editor

-- Enable necessary extensions
create extension if not exists "uuid-ossp" with schema extensions;
create extension if not exists "pgcrypto" with schema extensions;

-- Create custom types if they don't exist
do $$
begin
  if not exists (select 1 from pg_type where typname = 'user_role') then
    create type user_role as enum (
      'user',
      'admin',
      'auditor',
      'developer',
      'analyst',
      'manager',
      'guest'
    );
  end if;
end $$;

-- Create audit_logs table
create table if not exists public.audit_logs (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete set null,
  action text not null,
  resource_type text,
  resource_id text,
  details jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security
alter table public.audit_logs enable row level security;

-- Create indexes for better performance
create index if not exists idx_audit_logs_user_id on public.audit_logs (user_id);
create index if not exists idx_audit_logs_created_at on public.audit_logs (created_at);
create index if not exists idx_audit_logs_resource on public.audit_logs (resource_type, resource_id);

-- Create profiles table to extend auth.users
create table if not exists public.profiles (
  id uuid references auth.users on delete cascade primary key,
  username text unique,
  full_name text,
  avatar_url text,
  role user_role not null default 'user'::user_role,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table public.profiles enable row level security;

-- Create a function to handle new user signups
create or replace function public.handle_new_user() 
returns trigger as $$
begin
  insert into public.profiles (id, username, role)
  values (
    new.id, 
    new.raw_user_meta_data->>'username' || '_' || substr(md5(random()::text), 1, 8),
    'user'::user_role
  );
  return new;
end;
$$ language plpgsql security definer;

-- Trigger the function every time a user is created
create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Create RLS policies for profiles
create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can update own profile."
  on profiles for update
  using ( auth.uid() = id );

-- Create RLS policies for audit_logs
create policy "Enable read access for authenticated users"
  on audit_logs for select
  to authenticated
  using (true);

create policy "Enable insert for authenticated users"
  on audit_logs for insert
  to authenticated
  with check (true);

-- Helper function to list tables
create or replace function public.get_tables()
returns table (table_name text) as $$
begin
  return query 
    select tablename::text 
    from pg_tables 
    where schemaname = 'public';
end;
$$ language plpgsql security definer;

-- Helper function to get current user's role
create or replace function public.get_user_role()
returns user_role as $$
begin
  return (
    select role 
    from public.profiles 
    where id = auth.uid()
  );
end;
$$ language plpgsql security definer;

-- Create a default admin user (password: admin123 - change this after first login)
-- First check if user exists
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM auth.users WHERE email = 'admin@fairmind.app') THEN
    INSERT INTO auth.users (
      id, instance_id, email, encrypted_password, email_confirmed_at,
      raw_app_meta_data, raw_user_meta_data, created_at, updated_at, last_sign_in_at
    ) VALUES (
      '00000000-0000-0000-0000-000000000000',
      '00000000-0000-0000-0000-000000000000',
      'admin@fairmind.app',
      crypt('admin123', gen_salt('bf')),
      now(),
      '{"provider":"email","providers":["email"]}',
      '{"username":"admin"}',
      now(),
      now(),
      now()
    );
    
    -- Insert into profiles
    INSERT INTO public.profiles (id, username, role)
    VALUES (
      '00000000-0000-0000-0000-000000000000',
      'admin_' || substr(md5(random()::text), 1, 8),
      'admin'::user_role
    )
    ON CONFLICT (id) DO UPDATE 
    SET role = 'admin'::user_role;
  END IF;
END $$;

-- Set admin role for the default admin user
update public.profiles 
set role = 'admin'::user_role 
where id = '00000000-0000-0000-0000-000000000000';

-- Enable realtime for tables
alter publication supabase_realtime add table public.audit_logs;
alter publication supabase_realtime add table public.profiles;`;

// Write the SQL to a file
const outputPath = path.join(__dirname, 'supabase-setup.sql');
fs.writeFileSync(outputPath, sqlContent);

console.log(`âœ… SQL file generated at: ${outputPath}`);
console.log('Please run this SQL in your Supabase SQL editor to set up the database.');
