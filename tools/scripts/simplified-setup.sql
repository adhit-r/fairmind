-- Simplified Database Setup for Fairmind

-- Enable necessary extensions
create extension if not exists "uuid-ossp" with schema extensions;
create extension if not exists "pgcrypto" with schema extensions;

-- Create custom types
create type user_role as enum (
  'user',
  'admin',
  'auditor',
  'developer',
  'analyst',
  'manager',
  'guest'
);

-- Create audit_logs table
create table if not exists public.audit_logs (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete set null,
  action text not null,
  resource_type text,
  resource_id text,
  details jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create profiles table to extend auth.users
create table if not exists public.profiles (
  id uuid references auth.users on delete cascade primary key,
  username text unique,
  full_name text,
  avatar_url text,
  role user_role not null default 'user'::user_role,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- First, create the auth user if it doesn't exist
INSERT INTO auth.users (
  instance_id,
  id,
  aud,
  role,
  email,
  encrypted_password,
  email_confirmed_at,
  recovery_sent_at,
  last_sign_in_at,
  created_at,
  updated_at,
  confirmation_token,
  email_change,
  email_change_token_new,
  recovery_token
) 
SELECT 
  '00000000-0000-0000-0000-000000000000',
  gen_random_uuid(),
  'authenticated',
  'authenticated',
  'admin@fairmind.app',
  crypt('admin123', gen_salt('bf')),
  now(),
  now(),
  now(),
  now(),
  now(),
  '',
  '',
  '',
  ''
WHERE NOT EXISTS (
  SELECT 1 FROM auth.users WHERE email = 'admin@fairmind.app'
);

-- Then create or update the profile for the admin user
INSERT INTO public.profiles (
  id,
  username,
  full_name,
  role,
  created_at,
  updated_at
)
SELECT 
  u.id,
  'admin_' || substr(md5(random()::text), 1, 8),
  'Administrator',
  'admin'::user_role,
  now(),
  now()
FROM auth.users u
WHERE u.email = 'admin@fairmind.app'
ON CONFLICT (id) DO UPDATE 
SET 
  role = 'admin'::user_role,
  updated_at = now();
